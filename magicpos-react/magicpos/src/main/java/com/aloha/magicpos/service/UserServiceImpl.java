package com.aloha.magicpos.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.aloha.magicpos.domain.Auths;
import com.aloha.magicpos.domain.Users;
import com.aloha.magicpos.mapper.UserMapper;
import com.aloha.magicpos.util.PasswordUtil;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Service("UserService")
public class UserServiceImpl implements UserService {

    @Autowired private UserMapper userMapper;
    @Autowired PasswordEncoder passwordEncoder;
    @Autowired
    private AuthenticationManager authenticationManager;

    /**
     * Ï†ÑÏ≤¥ ÌöåÏõêÏàò Ï°∞Ìöå 
     */
    @Override
    public int countUsers(String type, String keyword) {
        if (type == null || type.isBlank() || keyword == null || keyword.isBlank()){
            return userMapper.countAll();
        }
        return userMapper.countBy(type, keyword);
    }

    @Override
    public List<Users> selectAll(int index, int size) throws Exception {
        return userMapper.selectAll(index, size);
    }



    @Override
    public List<Users> searchUsers(String type, String keyword, int index, int size) {
        // Ï†ÑÏ≤¥Î≥¥Í∏∞ (Í≤ÄÏÉâ Ï°∞Í±¥ ÏóÜÏùÑ Îïå)
        if (keyword == null || keyword.isBlank() || type == null || type.isBlank()) {
            return userMapper.selectAll(index, size);
        }

        // Í≤ÄÏÉâÏñ¥ ÏûàÏùÑ Í≤ΩÏö∞ 
        return userMapper.searchBy(type, keyword, index, size);
    }


    @Override
    public Users selectByNo(long no) throws Exception {  
        return userMapper.selectByNo(no);
    }

    @Override
    public Users findById(String id) throws Exception {
        return userMapper.findById(id);
    }

    @Override 
    public boolean isIdExist(String id) {
        return userMapper.findById(id) != null;
    }


    @Override
    public Users findByNo(Long userNo) {
        return userMapper.selectByNo(userNo);
    }


    //Í¥ÄÎ¶¨ÏûêÏö© ÌöåÏõêÍ∞ÄÏûÖ
    @Override
    @Transactional
    public Users insert(Users user) throws Exception {          
        // ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉùÏÑ± 
        String tempPassword = PasswordUtil.generateTempPassword();

        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî 
        String encoded = passwordEncoder.encode(tempPassword);
        user.setPassword(encoded);

        // ÏÉùÏÑ±Ìïú ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏ Î∞òÌôò
        user.setTempPassword(tempPassword);

        // DBÏóê Ï†ÄÏû• 
        int result = userMapper.insert(user);

        if (result > 0) {
            Auths auth = new Auths();
            auth.setUNo(user.getNo());
            auth.setAuth("ROLE_USER");
            int authResult = userMapper.insertAuth(auth);

            if (authResult > 0) {
                log.info("Í∂åÌïú Îì±Î°ù ÏÑ±Í≥µ");
            } else {
                log.warn("Í∂åÌïú Îì±Î°ù Ïã§Ìå®");
            }

        } else {
            log.error("ÏÇ¨Ïö©Ïûê Îì±Î°ù Ïã§Ìå®");
        }
        return user; 
    }

    // ÏÇ¨Ïö©ÏûêÏö© ÌöåÏõêÍ∞ÄÏûÖ
    @Override
    @Transactional
    public Users insertByUser(Users user) throws Exception {
        String encodedPassword = passwordEncoder.encode(user.getPassword());
        user.setPassword(encodedPassword);

        // DBÏóê Ï†ÄÏû• 
        int result = userMapper.insert(user);

        if (result > 0) {
            Auths auth = new Auths();
            auth.setUNo(user.getNo());
            auth.setAuth("ROLE_USER");
            int authResult = userMapper.insertAuth(auth);

            if (authResult > 0) {
                log.info("Í∂åÌïú Îì±Î°ù ÏÑ±Í≥µ");
            } else {
                log.warn("Í∂åÌïú Îì±Î°ù Ïã§Ìå®");
            }

        } else {
            log.error("ÏÇ¨Ïö©Ïûê Îì±Î°ù Ïã§Ìå®");
        }
        return user; 
    }


    @Override
    public boolean update(Users user) throws Exception {
        return userMapper.update(user) > 0;
    }

    @Override
    public boolean resetPassword(long no, String defaultPassword) throws Exception {
        return userMapper.resetPassword(no, defaultPassword) > 0;
    }

    @Override
    public boolean updateUserProfile(Users user) throws Exception {
        return userMapper.updateUserProfile(user) > 0;
    }

    @Override
    public boolean delete(long no) throws Exception {
        return userMapper.delete(no) > 0;
    }

    @Override
    public List<Users> searchUsersByKeyword(String keyword) throws Exception {
        return userMapper.searchUsersByKeyword(keyword);
    }

    @Override
    public int join(Users user) throws Exception {
        // üîí ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî
        String encodedPassword = passwordEncoder.encode(user.getPassword());
        user.setPassword(encodedPassword);

        // ÌöåÏõê Îì±Î°ù (ÏûêÎèôÏúºÎ°ú user.no Ï±ÑÏõåÏßê)
        int result = userMapper.join(user);

        if (result > 0) {
            // Î∞©Í∏à Îì±Î°ùÎêú ÌöåÏõêÏùò no(PK)Î•º Í∏∞Î∞òÏúºÎ°ú Í∂åÌïú Îì±Î°ù
            Auths userAuth = new Auths();
            userAuth.setUNo(user.getNo());         // ‚úÖ ÌïµÏã¨ Î≥ÄÍ≤Ω: uNo ÏÑ§Ï†ï
            userAuth.setAuth("ROLE_USER");
            result = userMapper.insertAuth(userAuth);
        }

        return result;
    }

    @Override
    public boolean insertAuth(Auths auth) throws Exception {
        int result = userMapper.insertAuth(auth);
        return result > 0;
    }

    @Override
    public boolean login(Users user, HttpServletRequest request) {
        // üíç ÌÜ†ÌÅ∞ ÏÉùÏÑ±
        String username = user.getUsername();
        String password = user.getPassword();
        UsernamePasswordAuthenticationToken token 
            = new UsernamePasswordAuthenticationToken(username, password);

        // ÌÜ†ÌÅ∞ÏùÑ Ïù¥Ïö©ÌïòÏó¨ Ïù∏Ï¶ù
        Authentication authentication = authenticationManager.authenticate(token);

        // Ïù∏Ï¶ù Ïó¨Î∂Ä ÌôïÏù∏
        boolean result = authentication.isAuthenticated();

        // Ïù∏Ï¶ùÏóê ÏÑ±Í≥µÌïòÎ©¥ SecurityContext Ïóê ÏÑ§Ï†ï
        if( result ) {
            SecurityContext securityContext = SecurityContextHolder.getContext();
            securityContext.setAuthentication(authentication);

            // ÏÑ∏ÏÖò Ïù∏Ï¶ù Ï†ïÎ≥¥ ÏÑ§Ï†ï (ÏÑ∏ÏÖòÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±)
            HttpSession session = request.getSession(true); // ÏÑ∏ÏÖòÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
            session.setAttribute("SPRING_SECURITY_CONTEXT", securityContext);
        }
        return result;   
    }

    @Override
    public Users select(String id) throws Exception {
        Users user = userMapper.select(id);
        return user;
    }

    @Override
    public boolean isAdmin() throws Exception {
        Authentication auth 
                = SecurityContextHolder.getContext().getAuthentication();
        if( auth == null || !auth.isAuthenticated() ) return false;

        return auth.getAuthorities()
                    .stream()
                    .map(GrantedAuthority::getAuthority)
                    .anyMatch(role -> role.equals("ROLE_ADMIN"));
    }


 





    
}
